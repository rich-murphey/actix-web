initSidebarItems({"enum":[["Body","Represents various types of http message body."],["BodySize","Body size hint"],["Payload","Type represent streaming payload"],["ResponseBody",""]],"struct":[["AppConfig",""],["AppService","Application configuration"],["ConnectionInfo","`HttpRequest` connection information"],["Decompress",""],["Extensions","A type map of request extensions."],["HttpResponseBuilder","An HTTP response builder"],["Path","Resource path match information"],["RequestHead",""],["ResourceDef","ResourceDef describes an entry in resources table"],["ResourceMap",""],["ResponseHead",""],["Server",""],["ServiceRequest","An service http request"],["ServiceResponse",""],["SizedStream","Type represent streaming body. This body implementation should be used if total size of stream is known. Data get sent as is without using transfer encoding."],["Url",""],["WebService",""]],"trait":[["HttpServiceFactory",""],["MessageBody","Type that provides this trait can be streamed to a peer."],["ResourcePath",""],["Service","An asynchronous function from `Request` to a `Response`."],["Transform","The `Transform` trait defines the interface of a Service factory. `Transform` is often implemented for middleware, defining how to construct a middleware Service. A Service that is constructed by the factory takes the Service that follows it during execution as a parameter, assuming ownership of the next Service."]],"type":[["PayloadStream","Type represent boxed payload"]]});